"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaAllureGateway = void 0;
const METHODS_TO_WRAP = [
    "epic",
    "feature",
    "story",
    "suite",
    "parentSuite",
    "subSuite",
    "label",
    "parameter",
    "link",
    "issue",
    "tms",
    "description",
    "descriptionHtml",
    "owner",
    "severity",
    "layer",
    "id",
    "tag",
    "writeEnvironmentInfo",
    "writeCategoriesDefinitions",
    "attachment",
    "testAttachment",
    "logStep",
    "step",
];
class MochaAllureGateway {
    constructor(allureGetter) {
        this.allureGetter = allureGetter;
        METHODS_TO_WRAP.forEach((method) => {
            this[method] = this.wrapMethod(method);
        });
    }
    wrapMethod(methodName) {
        return (...args) => {
            const allure = this.allureGetter();
            if (!allure) {
                console.error(`MochaAllure: "${methodName}" can't be used in parallel mode! To use Allure Runtime API, please, switch back to single thread mode.`);
                return;
            }
            return allure[methodName](...args);
        };
    }
}
exports.MochaAllureGateway = MochaAllureGateway;
//# sourceMappingURL=MochaAllureGateway.js.map